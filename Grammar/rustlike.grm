"Name"     = 'Enter the name of the grammar'
"Author"   = 'Enter your name'
"Version"  = 'The version of the grammar and/or language'
"About"    = 'A short description of the grammar'

"Start Symbol" = <Program>

! -------------------------------------------------
! Character Sets
! -------------------------------------------------

{ID Head}      = {Letter} + [_]
{ID Tail}      = {Alphanumeric} + [_]
{String Chars} = {Printable} + {HT} - ["]

! -------------------------------------------------
! Terminals
! -------------------------------------------------

Identifier    = {ID Head}{ID Tail}*
StringLiteral = '"' {String Chars}* '"'
Integer       = {digit}+

! -------------------------------------------------
! Rules
! -------------------------------------------------

! The grammar starts below
<Program> ::= <StatementList>
           
<StatementList> ::=
                   | <StatementList> <Statement>
                   | <Statement>    

<Statement> ::= <VariableDeclaration> | <Assignment> 
             | <IfStatement> | <MatchStatement> 
             | <ForLoop> | <WhileLoop> | <Loop>
             
<MutExpr> ::= 'mut' | <>
           
<VariableDeclaration> ::= 'let' <MutExpr> Identifier '=' <Expression> ';' ! ('mut')? Identifier '=' <Expression> ';'
                      
<Assignment> ::= Identifier '=' <Expression> ';'
              
<IfStatement> ::= 'if' <Expression> '{' <StatementList> '}'
               | 'if' <Expression> '{' <StatementList> '}' 'else' '{' <StatementList> '}'
               | 'if' <Expression> '{' <StatementList> '}' 'else' <IfStatement>
               
<MatchStatement> ::= 'match' Identifier '{' <ArmList> <Default> '}'
                  
<ArmList> ::= 
           | <ArmList> <Value> '=>' <StatementList> ','
           | <Value> '=>' <StatementList> ','
           
<Default> ::= '_' '=>' <StatementList>

<ForLoop> ::= 'for' Identifier 'in' Identifier '{' <StatementList> '}'
           
<WhileLoop> ::= 'while' <Expression> '{' <StatementList> '}'
              
<Loop> ::= 'loop' '{' <StatementList> 'break;' '}'

<Expression>  ::= <Expression> '>'  <Add Exp> 
               |  <Expression> '<'  <Add Exp> 
               |  <Expression> '<=' <Add Exp> 
               |  <Expression> '>=' <Add Exp>
               |  <Expression> '==' <Add Exp>    !Equal
               |  <Expression> '<>' <Add Exp>    !Not equal
               |  <Add Exp> 

<Add Exp>     ::= <Add Exp> '+' <Mult Exp>
               |  <Add Exp> '-' <Mult Exp>
               |  <Mult Exp> 

<Mult Exp>    ::= <Mult Exp> '*' <Negate Exp> 
               |  <Mult Exp> '/' <Negate Exp> 
               |  <Negate Exp> 

<Negate Exp>  ::= '-' <Value> 
               |  <Value> 

!Add more values to the rule below - as needed

<Value>       ::= Identifier
               |Integer
               |StringLiteral
               |  '(' <Expression> ')'
